$remBase: 16 !default;

@function px-to-rems($size: 24) {
  $value: ($size / $remBase) * 1rem;

  @return $value;
}

//
//We use this function to calculate the toolbars position
//and width for different positions
//
//$width - the width from which to set the arrow position
@function calculate-toolbar-arrow-position($width: 7px) {

  @return $width * 2 * -1;
}

//Function to transform a list into a string
@function to-string($list, $glue: '', $prev-glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    }

    @else {
      $result: if($i != length($list) or $is-nested, $result#{$prev-glue}#{$e}#{$glue}, $result#{$prev-glue}#{$e});
    }
  }

  @return $result;
}

//Slice or sublist from a list
@function slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  }

  @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  }

  @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  }

  @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  }

  @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  }

  @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}
